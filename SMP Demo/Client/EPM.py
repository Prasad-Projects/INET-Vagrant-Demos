#!/usr/bin/python2.7
import os, time, sys, re, string
#cache fields: ServiceID, Role, EthAddr, Port, TTL, Auth, timestamp
#All servers must register with EPM, all connections made to SDS must pass through here
#first message must be an integer from {1,2,3,4}- 1: for registering a server port,should give appropriate reply in case of duplication, 2: for knowing whether a port is engaged or not, 3: for inserting a recently queried ServiceID, Role with Auth='NO', 4: for fetching associated cached values with ep
#port is randomly generated by the SMP Lib
#a timer should be used to update ttl values in real-time, sleep before reading

ETH_MY_MAC1 = 0x40,0x16,0x7e,0x9d,0xb5,0x78 #mac 40:16:7E:9D:B5:78
ETH_MY_MAC = '40167e9db578' #eth address here is string not a tuple of integer values #host mac

cache = {}
if not os.path.exists('EPMr'):
    os.mkfifo('EPMr', 0777)
if not os.path.exists('EPMw'):
    os.mkfifo('EPMw', 0777) #open when needed for writing back replies
for i in range(20):  #services 20 requests    
  pin = open('EPMr', 'r') #blocking call
  time.sleep(2) #determine the right place to sleep
  pout = os.open('EPMw', os.O_WRONLY)
  time.sleep(2)
  choice = pin.readline()[:-1]
  print choice

  if choice == '1': #format: serviceID role port
      sid = ()
      in1 = pin.readline()[:-1]
      print in1
      fields = in1.split(" ")
      sid = tuple(re.findall('..', fields[0]))
      role = int(fields[1])
      eth = ETH_MY_MAC
      port = int(fields[2])
      ttl = 3600

      if cache.has_key((sid, role)):
          os.write(pout, '0\n') #0 means you can't use this server ID, role
      else:
          os.write(pout, '1\n')
          cache[(sid, role)] = (eth, port, ttl, 'YES', time.time())

  elif choice == '2': #format: port
      portin = int(pin.readline()[:-1])
      for key in cache.keys():
          if portin == cache[key][1]:
              os.write(pout, '0\n')
              break
          else:
              os.write(pout, '1\n')
              break
  #timestamped to implement ttl
  elif choice == '3': #format: serviceID role ETH port ttl
      auth = 'NO'
      in1 = pin.readline()[:-1]
      fields = in1.split(" ")
      serviceID = tuple(re.findall('..',fields[0]))
      role = int(fields[1])
      eth = fields[2]
      port = int(fields[3])
      ttl = int(fields[4])
      cache[(serviceID, role)] = (eth, port, ttl, auth, time.time())
      os.write(pout, '1\n')

  else : #format: serviceID role
      in1 = pin.readline()[:-1]
      fields = in1.split(" ")
      serviceID = fields[0]
      role = int(fields[1])
      if cache.has_key((serviceID, role)):
          val = cache[(serviceID, role)]
          eth = val[0]
          port = val[1]
          ttl = val[2]
          auth = val[3]
          timestamp = val[4]
          presentTime = time.time()
          diff = presentTime-timestamp
          os.write(pout, eth+" "+str(port)+" "+str(ttl-diff)+" "+auth+"\n")
      else:
          os.write(pout, '0\n') #key not found
    
    
    
    
    
    
    



